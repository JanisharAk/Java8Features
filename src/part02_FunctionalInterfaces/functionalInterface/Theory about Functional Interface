A functional interface in Java is an interface that contains only one abstract
method. Functional interfaces can have multiple default or static methods, but
only one abstract method. Runnable, ActionListener, and Comparator are common
examples of Java functional interfaces. From Java 8 onwards, lambda expressions
and method references can be used to represent the instance of a functional interface.


Built-In Java Functional Interfaces
Since Java SE 1.8 onwards, there are many interfaces that are converted into
functional interfaces. All these interfaces are annotated with @FunctionalInterface.

These interfaces are as follows:

1.Runnable: This interface only contains the run() method.
2.Comparable: This interface only contains the compareTo() method.
3.ActionListener: This interface only contains the actionPerformed() method.
4.Callable: This interface only contains the call() method.


Types of Functional Interfaces in Java
Java SE 8 included four main kinds of functional interfaces which can be applied
in multiple situations as mentioned below:

1.Consumer
2.Predicate
3.Function
4.Supplier